{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","serviceWorker.js","index.js"],"names":["components_Button","props","classes","operation","doble","triple","react_default","a","createElement","onClick","e","click","label","className","components_Display","value","initialState","displayValue","clearDisplay","values","current","Calculator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","clearMemory","bind","assertThisInitialized","setOperation","addDigit","setState","equals","currentOperation","toConsumableArray","n","includes","i","newValue","parseFloat","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","Calculator_Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38d5b871.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Button.css'\r\n\r\nexport default props => {\r\n    let classes ='button '\r\n    classes += props.operation ? 'operation' : ''\r\n    classes += props.doble ? 'doble' : ''\r\n    classes += props.triple ? 'triple' : ''\r\n    \r\n    return(\r\n        <button\r\n            onClick={ e => props.click && props.click(props.label)}\r\n            className={classes}>\r\n            {props.label}\r\n        </button>\r\n    )\r\n}","import React from 'react'\r\nimport './Display.css'\r\n\r\nexport default props =>\r\n    <div className=\"display\">{ props.value }</div>\r\n\r\n","import React, { Component } from 'react'\r\nimport './Calculator.css'\r\n\r\nimport Button from '../components/Button'\r\nimport Display from '../components/Display';\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0, 0],\r\n    current: 0\r\n}\r\n\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    state = { ...initialState } \r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.clearMemory = this.clearMemory.bind(this)\r\n        this.setOperation = this.setOperation.bind(this)\r\n        this.addDigit = this.addDigit.bind(this)\r\n    }\r\n\r\n    clearMemory() {\r\n        this.setState({ ...initialState })\r\n    }\r\n\r\n    setOperation(operation) {\r\n        if(this.state.current === 0){\r\n            this.setState({ operation, current: 1, clearDisplay: true })\r\n        } else {\r\n            const equals = operation === '='\r\n            const currentOperation = this.state.operation\r\n\r\n            const values = [...this.state.values]\r\n\r\n            switch (currentOperation) {\r\n                case \"+\":\r\n                    values[0] = values[0] + values[1]\r\n                    break;\r\n                case \"-\":\r\n                    values[0] = values[0] - values[1]\r\n                    break;\r\n                case \"*\":\r\n                    values[0] = values[0] * values[1]\r\n                    break;\r\n                case \"/\":\r\n                    values[0] = values[0] / values[1]\r\n                    break;\r\n            }\r\n            \r\n            values[1] = 0\r\n\r\n            this.setState({\r\n                displayValue: values[0],\r\n                operation: equals ? null : operation,\r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals,\r\n                values\r\n            })\r\n        }\r\n    }\r\n    \r\n    addDigit(n) {\r\n        if(n === '.' && this.state.displayValue.includes('.')) {\r\n            return\r\n        }\r\n\r\n        const clearDisplay = this.state.displayValue === '0'\r\n            || this.state.clearDisplay\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue\r\n        const displayValue = currentValue + n\r\n        this.setState({ displayValue , clearDisplay: false })\r\n\r\n        if(n !== '.') {\r\n            const i = this.state.current\r\n            const newValue = parseFloat(displayValue)\r\n            const values = [...this.state.values]\r\n            values[i] = newValue\r\n            this.setState({ values })\r\n            console.log(values)\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return ( \r\n            <div>\r\n                <h1>Calculadora</h1>\r\n                <div className=\"calculator\">\r\n                    <Display value={this.state.displayValue} />\r\n                    <Button label=\"AC\" click={this.clearMemory } triple />\r\n                    <Button label=\"/\"  click={this.setOperation } operation />\r\n                    <Button label=\"7\"  click={this.addDigit } />\r\n                    <Button label=\"8\"  click={this.addDigit } />\r\n                    <Button label=\"9\"  click={this.addDigit } />\r\n                    <Button label=\"*\"  click={this.setOperation } operation />\r\n                    <Button label=\"4\"  click={this.addDigit } />\r\n                    <Button label=\"5\"  click={this.addDigit } />\r\n                    <Button label=\"6\"  click={this.addDigit } />\r\n                    <Button label=\"-\"  click={this.setOperation } operation />\r\n                    <Button label=\"1\"  click={this.addDigit } />\r\n                    <Button label=\"2\"  click={this.addDigit } />\r\n                    <Button label=\"3\"  click={this.addDigit } />\r\n                    <Button label=\"+\"  click={this.setOperation } operation />\r\n                    <Button label=\"0\"  click={this.addDigit } doble />\r\n                    <Button label=\".\"  click={this.addDigit } />\r\n                    <Button label=\"=\"  click={this.setOperation } operation />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Calculator from './main/Calculator';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    \r\n    <Calculator />\r\n\r\n, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}